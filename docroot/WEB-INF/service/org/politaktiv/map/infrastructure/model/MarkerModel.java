/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 *        
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.politaktiv.map.infrastructure.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the Marker service. Represents a row in the &quot;politaktivmap_Marker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.politaktiv.map.infrastructure.model.impl.MarkerModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.politaktiv.map.infrastructure.model.impl.MarkerImpl}.
 * </p>
 *
 * @author eichi
 * @see Marker
 * @see org.politaktiv.map.infrastructure.model.impl.MarkerImpl
 * @see org.politaktiv.map.infrastructure.model.impl.MarkerModelImpl
 * @generated
 */
public interface MarkerModel extends BaseModel<Marker> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a marker model instance should use the {@link Marker} interface instead.
	 */

	/**
	 * Returns the primary key of this marker.
	 *
	 * @return the primary key of this marker
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this marker.
	 *
	 * @param primaryKey the primary key of this marker
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the marker ID of this marker.
	 *
	 * @return the marker ID of this marker
	 */
	public long getMarkerId();

	/**
	 * Sets the marker ID of this marker.
	 *
	 * @param markerId the marker ID of this marker
	 */
	public void setMarkerId(long markerId);

	/**
	 * Returns the company ID of this marker.
	 *
	 * @return the company ID of this marker
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this marker.
	 *
	 * @param companyId the company ID of this marker
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this marker.
	 *
	 * @return the group ID of this marker
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this marker.
	 *
	 * @param groupId the group ID of this marker
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this marker.
	 *
	 * @return the user ID of this marker
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this marker.
	 *
	 * @param userId the user ID of this marker
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this marker.
	 *
	 * @return the user uuid of this marker
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this marker.
	 *
	 * @param userUuid the user uuid of this marker
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the name of this marker.
	 *
	 * @return the name of this marker
	 */
	@AutoEscape
	public String getName();

	/**
	 * Sets the name of this marker.
	 *
	 * @param name the name of this marker
	 */
	public void setName(String name);

	/**
	 * Returns the description of this marker.
	 *
	 * @return the description of this marker
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this marker.
	 *
	 * @param description the description of this marker
	 */
	public void setDescription(String description);

	/**
	 * Returns the reference url of this marker.
	 *
	 * @return the reference url of this marker
	 */
	@AutoEscape
	public String getReferenceUrl();

	/**
	 * Sets the reference url of this marker.
	 *
	 * @param referenceUrl the reference url of this marker
	 */
	public void setReferenceUrl(String referenceUrl);

	/**
	 * Returns the background ID of this marker.
	 *
	 * @return the background ID of this marker
	 */
	public long getBackgroundId();

	/**
	 * Sets the background ID of this marker.
	 *
	 * @param backgroundId the background ID of this marker
	 */
	public void setBackgroundId(long backgroundId);

	/**
	 * Returns the longitude of this marker.
	 *
	 * @return the longitude of this marker
	 */
	public double getLongitude();

	/**
	 * Sets the longitude of this marker.
	 *
	 * @param longitude the longitude of this marker
	 */
	public void setLongitude(double longitude);

	/**
	 * Returns the latitude of this marker.
	 *
	 * @return the latitude of this marker
	 */
	public double getLatitude();

	/**
	 * Sets the latitude of this marker.
	 *
	 * @param latitude the latitude of this marker
	 */
	public void setLatitude(double latitude);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(Marker marker);

	public int hashCode();

	public CacheModel<Marker> toCacheModel();

	public Marker toEscapedModel();

	public String toString();

	public String toXmlString();
}