/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 *        
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.politaktiv.map.infrastructure.model;

import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the DbPicture service. Represents a row in the &quot;politaktivmap_DbPicture&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.politaktiv.map.infrastructure.model.impl.DbPictureModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.politaktiv.map.infrastructure.model.impl.DbPictureImpl}.
 * </p>
 *
 * @author eichi
 * @see DbPicture
 * @see org.politaktiv.map.infrastructure.model.impl.DbPictureImpl
 * @see org.politaktiv.map.infrastructure.model.impl.DbPictureModelImpl
 * @generated
 */
public interface DbPictureModel extends BaseModel<DbPicture> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a db picture model instance should use the {@link DbPicture} interface instead.
	 */

	/**
	 * Returns the primary key of this db picture.
	 *
	 * @return the primary key of this db picture
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this db picture.
	 *
	 * @param primaryKey the primary key of this db picture
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the picture ID of this db picture.
	 *
	 * @return the picture ID of this db picture
	 */
	public long getPictureId();

	/**
	 * Sets the picture ID of this db picture.
	 *
	 * @param pictureId the picture ID of this db picture
	 */
	public void setPictureId(long pictureId);

	/**
	 * Returns the rotation of this db picture.
	 *
	 * @return the rotation of this db picture
	 */
	public long getRotation();

	/**
	 * Sets the rotation of this db picture.
	 *
	 * @param rotation the rotation of this db picture
	 */
	public void setRotation(long rotation);

	/**
	 * Returns the width of this db picture.
	 *
	 * @return the width of this db picture
	 */
	public long getWidth();

	/**
	 * Sets the width of this db picture.
	 *
	 * @param width the width of this db picture
	 */
	public void setWidth(long width);

	/**
	 * Returns the height of this db picture.
	 *
	 * @return the height of this db picture
	 */
	public long getHeight();

	/**
	 * Sets the height of this db picture.
	 *
	 * @param height the height of this db picture
	 */
	public void setHeight(long height);

	/**
	 * Returns the resolution of this db picture.
	 *
	 * @return the resolution of this db picture
	 */
	public double getResolution();

	/**
	 * Sets the resolution of this db picture.
	 *
	 * @param resolution the resolution of this db picture
	 */
	public void setResolution(double resolution);

	/**
	 * Returns the point ID of this db picture.
	 *
	 * @return the point ID of this db picture
	 */
	public long getPointId();

	/**
	 * Sets the point ID of this db picture.
	 *
	 * @param pointId the point ID of this db picture
	 */
	public void setPointId(long pointId);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(DbPicture dbPicture);

	public int hashCode();

	public CacheModel<DbPicture> toCacheModel();

	public DbPicture toEscapedModel();

	public String toString();

	public String toXmlString();
}