/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 *        
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.politaktiv.map.infrastructure.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.politaktiv.map.infrastructure.model.DbMapObject;
import org.politaktiv.map.infrastructure.model.DbMapObjectModel;
import org.politaktiv.map.infrastructure.model.DbMapObjectSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the DbMapObject service. Represents a row in the &quot;politaktivmap_DbMapObject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.politaktiv.map.infrastructure.model.DbMapObjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DbMapObjectImpl}.
 * </p>
 *
 * @author eichi
 * @see DbMapObjectImpl
 * @see org.politaktiv.map.infrastructure.model.DbMapObject
 * @see org.politaktiv.map.infrastructure.model.DbMapObjectModel
 * @generated
 */
@JSON(strict = true)
public class DbMapObjectModelImpl extends BaseModelImpl<DbMapObject>
	implements DbMapObjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a db map object model instance should use the {@link org.politaktiv.map.infrastructure.model.DbMapObject} interface instead.
	 */
	public static final String TABLE_NAME = "politaktivmap_DbMapObject";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mapObjectId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "referenceUrl", Types.VARCHAR },
			{ "occupancy", Types.BIGINT },
			{ "mapId", Types.BIGINT },
			{ "type_", Types.VARCHAR },
			{ "graphicObjectId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table politaktivmap_DbMapObject (mapObjectId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,name VARCHAR(75) null,description VARCHAR(75) null,referenceUrl VARCHAR(75) null,occupancy LONG,mapId LONG,type_ VARCHAR(75) null,graphicObjectId LONG)";
	public static final String TABLE_SQL_DROP = "drop table politaktivmap_DbMapObject";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.politaktiv.map.infrastructure.model.DbMapObject"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.politaktiv.map.infrastructure.model.DbMapObject"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.politaktiv.map.infrastructure.model.DbMapObject"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DbMapObject toModel(DbMapObjectSoap soapModel) {
		DbMapObject model = new DbMapObjectImpl();

		model.setMapObjectId(soapModel.getMapObjectId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setReferenceUrl(soapModel.getReferenceUrl());
		model.setOccupancy(soapModel.getOccupancy());
		model.setMapId(soapModel.getMapId());
		model.setType(soapModel.getType());
		model.setGraphicObjectId(soapModel.getGraphicObjectId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DbMapObject> toModels(DbMapObjectSoap[] soapModels) {
		List<DbMapObject> models = new ArrayList<DbMapObject>(soapModels.length);

		for (DbMapObjectSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.politaktiv.map.infrastructure.model.DbMapObject"));

	public DbMapObjectModelImpl() {
	}

	public long getPrimaryKey() {
		return _mapObjectId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMapObjectId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_mapObjectId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DbMapObject.class;
	}

	public String getModelClassName() {
		return DbMapObject.class.getName();
	}

	@JSON
	public long getMapObjectId() {
		return _mapObjectId;
	}

	public void setMapObjectId(long mapObjectId) {
		_mapObjectId = mapObjectId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public String getReferenceUrl() {
		if (_referenceUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _referenceUrl;
		}
	}

	public void setReferenceUrl(String referenceUrl) {
		_referenceUrl = referenceUrl;
	}

	@JSON
	public long getOccupancy() {
		return _occupancy;
	}

	public void setOccupancy(long occupancy) {
		_occupancy = occupancy;
	}

	@JSON
	public long getMapId() {
		return _mapId;
	}

	public void setMapId(long mapId) {
		_mapId = mapId;
	}

	@JSON
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	public void setType(String type) {
		_type = type;
	}

	@JSON
	public long getGraphicObjectId() {
		return _graphicObjectId;
	}

	public void setGraphicObjectId(long graphicObjectId) {
		_graphicObjectId = graphicObjectId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DbMapObject toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DbMapObject)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					DbMapObject.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DbMapObjectImpl dbMapObjectImpl = new DbMapObjectImpl();

		dbMapObjectImpl.setMapObjectId(getMapObjectId());
		dbMapObjectImpl.setCompanyId(getCompanyId());
		dbMapObjectImpl.setGroupId(getGroupId());
		dbMapObjectImpl.setUserId(getUserId());
		dbMapObjectImpl.setName(getName());
		dbMapObjectImpl.setDescription(getDescription());
		dbMapObjectImpl.setReferenceUrl(getReferenceUrl());
		dbMapObjectImpl.setOccupancy(getOccupancy());
		dbMapObjectImpl.setMapId(getMapId());
		dbMapObjectImpl.setType(getType());
		dbMapObjectImpl.setGraphicObjectId(getGraphicObjectId());

		dbMapObjectImpl.resetOriginalValues();

		return dbMapObjectImpl;
	}

	public int compareTo(DbMapObject dbMapObject) {
		long primaryKey = dbMapObject.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DbMapObject dbMapObject = null;

		try {
			dbMapObject = (DbMapObject)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = dbMapObject.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DbMapObjectModelImpl dbMapObjectModelImpl = this;

		dbMapObjectModelImpl._originalCompanyId = dbMapObjectModelImpl._companyId;

		dbMapObjectModelImpl._setOriginalCompanyId = false;

		dbMapObjectModelImpl._originalGroupId = dbMapObjectModelImpl._groupId;

		dbMapObjectModelImpl._setOriginalGroupId = false;

		dbMapObjectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DbMapObject> toCacheModel() {
		DbMapObjectCacheModel dbMapObjectCacheModel = new DbMapObjectCacheModel();

		dbMapObjectCacheModel.mapObjectId = getMapObjectId();

		dbMapObjectCacheModel.companyId = getCompanyId();

		dbMapObjectCacheModel.groupId = getGroupId();

		dbMapObjectCacheModel.userId = getUserId();

		dbMapObjectCacheModel.name = getName();

		String name = dbMapObjectCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dbMapObjectCacheModel.name = null;
		}

		dbMapObjectCacheModel.description = getDescription();

		String description = dbMapObjectCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dbMapObjectCacheModel.description = null;
		}

		dbMapObjectCacheModel.referenceUrl = getReferenceUrl();

		String referenceUrl = dbMapObjectCacheModel.referenceUrl;

		if ((referenceUrl != null) && (referenceUrl.length() == 0)) {
			dbMapObjectCacheModel.referenceUrl = null;
		}

		dbMapObjectCacheModel.occupancy = getOccupancy();

		dbMapObjectCacheModel.mapId = getMapId();

		dbMapObjectCacheModel.type = getType();

		String type = dbMapObjectCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			dbMapObjectCacheModel.type = null;
		}

		dbMapObjectCacheModel.graphicObjectId = getGraphicObjectId();

		return dbMapObjectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{mapObjectId=");
		sb.append(getMapObjectId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", referenceUrl=");
		sb.append(getReferenceUrl());
		sb.append(", occupancy=");
		sb.append(getOccupancy());
		sb.append(", mapId=");
		sb.append(getMapId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", graphicObjectId=");
		sb.append(getGraphicObjectId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("org.politaktiv.map.infrastructure.model.DbMapObject");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mapObjectId</column-name><column-value><![CDATA[");
		sb.append(getMapObjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceUrl</column-name><column-value><![CDATA[");
		sb.append(getReferenceUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>occupancy</column-name><column-value><![CDATA[");
		sb.append(getOccupancy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mapId</column-name><column-value><![CDATA[");
		sb.append(getMapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graphicObjectId</column-name><column-value><![CDATA[");
		sb.append(getGraphicObjectId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DbMapObject.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DbMapObject.class
		};
	private long _mapObjectId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _name;
	private String _description;
	private String _referenceUrl;
	private long _occupancy;
	private long _mapId;
	private String _type;
	private long _graphicObjectId;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private DbMapObject _escapedModelProxy;
}